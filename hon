#!/usr/bin/env bash

script_dir=$(dirname "$0")
bold=$(tput bold)
normal=$(tput sgr0)

# Database file path (modify as needed)
DB_FILE="$script_dir/my_books.db"

# Function to check if sqlite3 command is available
function check_sqlite3() {
  if ! command -v sqlite3 &> /dev/null; then
    echo "Error: sqlite3 command not found. Please install sqlite3."
    exit 1
  fi
}

# Function to execute a SQL query
function sq_exec() {
  local sql="$1"
  sqlite3 "$DB_FILE" <<< "$sql"
}

# Main program logic
check_sqlite3

case "$1" in
  # Add book with current page
  "a")
    read -p "Book Title: " title
    read -p "Total Pages: " total_pages
    read -p "Current Page (default 0): " current_page
    current_page=${current_page:-0}
    if [[ $current_page -ge $total_pages ]] ; then
      read -p "You're setting the current page weird. Are you sure you want to continue? (y/N): " confirmation
      if [[ "$confirmation" =~ ^[Yy]$ ]]; then
        :
      else
        exit 0
      fi
    else
      :
    fi
    sq_exec "INSERT INTO books (title, total_pages, current_page) VALUES ('$title', $total_pages, $current_page);"
    book_id=$(sq_exec "SELECT seq FROM sqlite_sequence WHERE name='books';")
    sq_exec "UPDATE books SET last_modified = DATETIME('now', 'localtime') WHERE id = $book_id;"
    echo "Book ${bold}$title${normal} with ${bold}$total_pages${normal} pages added!"
    ;;
  # Set a bookmark for the book (using fzf)
  "b")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    current_page=$(sq_exec "SELECT current_page FROM books WHERE id = $book_id;")
    total_pages=$(sq_exec "SELECT total_pages FROM books WHERE id = $book_id;")
    if [[ ! -z "$book_id" ]]; then
      read -p "New Current Page: " new_page
      if [[ $new_page -lt $current_page ]] || [[ $new_page -ge $total_pages ]] ; then
        read -p "You're setting the bookmark weird. Are you sure you want to continue? (y/N): " confirmation
        if [[ "$confirmation" =~ ^[Yy]$ ]]; then
          :
        else
          exit 0
        fi
      else
        :
      fi
      sq_exec "UPDATE books SET current_page = $new_page, last_modified = DATETIME('now', 'localtime') WHERE id = $book_id;"
      echo "Current page for ${bold}$book_name${normal} updated - ${bold}$new_page${normal}!"
    fi
    ;;
  # Delete a book (using fzf)
  "dd")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ ! -z "$book_id" ]]; then
    read -p "You're deleting the book from the database. Are you sure you want to continue? (y/N): " confirmation
    if [[ "$confirmation" =~ ^[Yy]$ ]]; then
        :
      else
        exit 0
      fi
      sq_exec "DELETE FROM books WHERE id = $book_id;"
      echo "${bold}$book_name${normal} has been dropped from library!"
    fi
    ;;
  # Complete book (using fzf)
  "c")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ ! -z "$book_id" ]]; then
      sq_exec "UPDATE books SET current_page = total_pages WHERE id = $book_id;"
      echo "${bold}$book_name${normal} is finished!"
    fi
    ;;
  # Find book and show current page using fzf
  "f")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ ! -z "$book_id" ]]; then
      current_page=$(sq_exec "SELECT current_page FROM books WHERE id = $book_id;")
      echo "You are currently on page ${bold}$current_page${normal} of ${bold}$book_name${normal}."
    fi
    ;;
  # Display your library with progress information
  "l")
    output=$(sq_exec "SELECT id, title, current_page, total_pages FROM books ORDER BY id ASC;")
    while IFS='|' read -r id title current_page total_pages; do
      percent=$(echo "scale=2; 100 * $current_page / $total_pages" | bc)
      echo "${bold}$title${normal} (Page ${bold}$current_page/$total_pages${normal} - ${bold}$percent%${normal} read)"
    done <<< "$output"  # Redirect captured output to the loop
    ;;
  *)
      echo "Invalid argument. Usage: hon (a(add a book)|b(update a bookmark)|c(complete the book)|f(find current bookmark for the book)|l(display your library)"
    ;;
esac
