#!/usr/bin/env bash

script_dir=$(dirname "$0")
bold=$(tput bold)
normal=$(tput sgr0)

# Database file path (modify as needed)
DB_FILE="$script_dir/my_books.db"

# Function to check if sqlite3 command is available
function check_sqlite3() {
  if ! command -v sqlite3 &> /dev/null; then
    echo "Error: sqlite3 command not found. Please install sqlite3."
    exit 1
  fi
}

# Function to execute a SQL query
function sq_exec() {
  local sql="$1"
  sqlite3 "$DB_FILE" <<< "$sql"
  # Check the exit code and return true/false accordingly
  if [ $? -eq 0 ]; then
    return 0  # Success
  else
    return 1  # Failure
  fi
}

# Main program logic
check_sqlite3

case "$1" in
  # Add book with current page
  "a")
    read -p "Book Title: " title
    if [[ -z $title ]]; then
        exit 0
    fi
    read -p "Total Pages: " total_pages
    if [[ -z $total_pages ]]; then
        exit 0
    fi
    read -p "Current Page (default 0): " current_page
    current_page=${current_page:-0}
    if [[ $current_page -ge $total_pages ]] ; then
      read -p "You're setting the current page weird. Are you sure you want to continue? (y/N): " confirmation
      if [[ "$confirmation" =~ ^[Yy]$ ]]; then
        :
      else
        exit 0
      fi
    else
      :
    fi
    if sq_exec "INSERT INTO books (title, total_pages, current_page) VALUES ('$title', $total_pages, $current_page);" 2>/dev/null; then
      echo "Book ${bold}$title${normal} with ${bold}$total_pages${normal} pages added!"
    else
      echo "Error!"
      exit 1
    fi
    book_id=$(sq_exec "SELECT seq FROM sqlite_sequence WHERE name='books';")
    sq_exec "UPDATE books SET last_modified = DATETIME('now', 'localtime') WHERE id = $book_id;"
    ;;
  # Set a bookmark for the book (using fzf)
  "b")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    current_page=$(sq_exec "SELECT current_page FROM books WHERE id = $book_id;")
    total_pages=$(sq_exec "SELECT total_pages FROM books WHERE id = $book_id;")
    if [[ ! -z "$book_id" ]]; then
      read -p "New Current Page: " new_page
      if [[ -z $new_page ]]; then
          exit 0
      fi
      if [[ $new_page -lt $current_page ]] || [[ $new_page -ge $total_pages ]] ; then
        read -p "You're setting the bookmark weird. Are you sure you want to continue? (y/N): " confirmation
        if [[ "$confirmation" =~ ^[Yy]$ ]]; then
          :
        else
          exit 0
        fi
      else
        :
      fi
      if sq_exec "UPDATE books SET current_page = $new_page, last_modified = DATETIME('now', 'localtime') WHERE id = $book_id;" 2>/dev/null; then
        echo "Current page for ${bold}$book_name${normal} updated - ${bold}$new_page${normal}!"
      else
        echo "Error!"
        exit 1
      fi
    fi
    ;;
  # Delete a book (using fzf)
  "d")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ ! -z "$book_id" ]]; then
    read -p "You're deleting the book from the database. Are you sure you want to continue? (y/N): " confirmation
    if [[ "$confirmation" =~ ^[Yy]$ ]]; then
        :
      else
        exit 0
      fi
      if sq_exec "DELETE FROM books WHERE id = $book_id;" 2>/dev/null; then
        echo "${bold}$book_name${normal} has been dropped from library!"
      else
        echo "Error!"
        exit 1
      fi
    fi
    ;;
  # Complete book (using fzf)
  "c")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ ! -z "$book_id" ]]; then
      if sq_exec "UPDATE books SET current_page = total_pages WHERE id = $book_id;" 2>/dev/null; then
        echo "${bold}$book_name${normal} is finished!"
      else
        echo "Error!"
        exit 1
      fi
    fi
    ;;
  # Find book and show current page using fzf
  "f")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ ! -z "$book_id" ]]; then
      current_page=$(sq_exec "SELECT current_page FROM books WHERE id = $book_id;")
      echo "You are currently on page ${bold}$current_page${normal} of ${bold}$book_name${normal}."
    fi
    ;;
  # Show your library with progress information
  "s")
    output=$(sq_exec "SELECT id, title, current_page, total_pages FROM books ORDER BY id ASC;")
    while IFS='|' read -r id title current_page total_pages; do
      percent=$(echo "scale=2; 100 * $current_page / $total_pages" | bc)
      echo "${bold}$title${normal} (Page ${bold}$current_page/$total_pages${normal} - ${bold}$percent%${normal} read)"
    done <<< "$output"  # Redirect captured output to the loop
    ;;
  # Open your ebook in zathura
  "o")
    book_name=$(sq_exec "SELECT title FROM books WHERE link IS NOT NULL ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ -z "$book_id" ]]; then
        exit 1
    else
        book_path=$(sq_exec "SELECT link FROM books WHERE id = $book_id")
        current_page=$(sq_exec "SELECT current_page FROM books WHERE id = $book_id")
        total_pages=$(sq_exec "SELECT total_pages FROM books WHERE id = $book_id;")
        if [[ -n "$book_path" ]]; then
            zathura --page=$current_page "$book_path" &
            wait $!
            read -p "New Current Page: " new_page
            if [[ -z $new_page ]]; then
                exit 0
            fi
            if [[ $new_page -lt $current_page ]] || [[ $new_page -ge $total_pages ]] ; then
                read -p "You're setting the bookmark weird. Are you sure you want to continue? (y/N): " confirmation
                if [[ "$confirmation" =~ ^[Yy]$ ]]; then
                    :
                else
                    exit 0
                fi
            else
                :
            fi
            if sq_exec "UPDATE books SET current_page = $new_page, last_modified = DATETIME('now', 'localtime') WHERE id = $book_id;" 2>/dev/null; then
                echo "Current page for ${bold}$book_name${normal} updated - ${bold}$new_page${normal}!"
            else
                echo "Error!"
                exit 1
            fi
        else
            echo "This book has no book path."
        fi
    fi
    ;;
  # Link your ebook to a file in computer (using fzf)
  "l")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    if [[ -z "$book_id" ]]; then
        exit 1
    else
        book_path=$(find ~/Downloads ~ ~/Downloads/Telegram\ Desktop -mindepth 1 -maxdepth 1 -type f | fzf -i)
        if [[ -z $book_path ]]; then
            exit 0
        else
            if sq_exec "UPDATE books SET link = '$book_path' WHERE id = $book_id;"; then
                echo "Book path to ${bold}$book_name${normal} updated successfully!"
            else
                echo "Error!"
            fi
        fi
    fi
    ;;
  # Rename book in the database
  "r")
    book_name=$(sq_exec "SELECT title FROM books ORDER BY last_modified DESC;" | fzf -i)
    if [[ -z "$book_name" ]]; then
        exit 0
    fi
    book_id=$(sq_exec "SELECT id FROM books WHERE title = '$book_name' ORDER BY last_modified DESC;" | head -n 1)
    read -p "New Book Title: " new_title
    if [[ -z $new_title ]]; then
        exit 0
    fi
    if sq_exec "UPDATE books SET title = '$new_title' WHERE id = $book_id;" 2>/dev/null; then
      echo "The title for book ${bold}$book_name${normal} updated - ${bold}$new_title${normal}!"
    else
      echo "Error!"
      exit 1
    fi
    ;;
  *)
    echo "Invalid argument. Type 'hon h' to see valid arguments."
    ;;
esac
